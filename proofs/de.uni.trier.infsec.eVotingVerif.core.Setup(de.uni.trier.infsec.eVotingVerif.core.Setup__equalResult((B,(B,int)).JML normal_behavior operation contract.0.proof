\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue May 06 11:44:38 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=70000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:off , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , optimisedSelectRules-optimisedSelectRules\\:on , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue May 06 11:44:38 CEST 2014
name=de.uni.trier.infsec.eVotingVerif.core.Setup[de.uni.trier.infsec.eVotingVerif.core.Setup\\:\\:equalResult([B,[B,int)].JML normal_behavior operation contract.0
contract=de.uni.trier.infsec.eVotingVerif.core.Setup[de.uni.trier.infsec.eVotingVerif.core.Setup\\:\\:equalResult([B,[B,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "8d05aaf99c7e9f0856000d7aef19e89f95a1ff10"))

(autoModeTime "87580")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "eqSymm" (formula "11") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "11") (term "0,2,1,1,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "11") (term "0,2,0,1,0,0,1,0,0,0,1"))
(rule "eqSymm" (formula "5"))
(rule "eqSymm" (formula "11") (term "0,0,0,1"))
(rule "eqSymm" (formula "11") (term "1,0,0,0,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "11") (term "1"))
(builtin "One Step Simplification" (formula "11"))
(rule "apply_eq_monomials" (formula "8") (term "1,0,0,1,0,0") (ifseqformula "5"))
(rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "8") (term "1,0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "1,1,1,0,0,1,0,0"))
(rule "times_zero_1" (formula "8") (term "1,1,0,0,1,0,0"))
(rule "add_zero_right" (formula "8") (term "1,0,0,1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,1,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,1,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,1,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "cnf_rightDist" (formula "7") (term "0"))
(rule "distr_forallAnd" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "commute_or" (formula "8") (term "0"))
(rule "cnf_rightDist" (formula "9") (term "0"))
(rule "distr_forallAnd" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "commute_or" (formula "10") (term "0"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_equalResult,savedHeapBefore_equalResult"))
(builtin "One Step Simplification" (formula "13"))
(rule "returnUnfold" (formula "13") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
(rule "arrayLengthIsAnInt" (formula "5") (term "0"))
(builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(rule "arrayLengthNotNegative" (formula "5") (term "1"))
(rule "arrayLengthNotNegative" (formula "6") (term "0"))
(rule "arrayLengthIsAnInt" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "true_left" (formula "7"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
(builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_computeResult,result_0,exc_0,heapAfter_computeResult,anon_heap_computeResult") (contract "de.uni.trier.infsec.eVotingVerif.core.Setup[de.uni.trier.infsec.eVotingVerif.core.Setup::computeResult([B,int)].JML normal_behavior operation contract.0"))
(branch "Post (computeResult)"
   (builtin "One Step Simplification" (formula "14"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "14"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0") (ifseqformula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "19"))
   (rule "notLeft" (formula "20"))
   (rule "notLeft" (formula "19"))
   (rule "eqSymm" (formula "18") (term "1,0"))
   (rule "eqSymm" (formula "18") (term "0,2,0,1,0"))
   (rule "replace_known_right" (formula "16") (term "0,1") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
   (rule "assignment" (formula "23") (term "1"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "18") (term "0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0"))
   (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_computeResult_0,result_1,exc_1,heapAfter_computeResult_0,anon_heap_computeResult_0") (contract "de.uni.trier.infsec.eVotingVerif.core.Setup[de.uni.trier.infsec.eVotingVerif.core.Setup::computeResult([B,int)].JML normal_behavior operation contract.0"))
   (branch "Post (computeResult)"
      (builtin "One Step Simplification" (formula "25"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,1,1,0,1,1") (ifseqformula "14"))
      (rule "andLeft" (formula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,1,0") (ifseqformula "14"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "orRight" (formula "26"))
      (rule "eqSymm" (formula "23") (term "0,2,1,1,0"))
      (rule "eqSymm" (formula "23") (term "1,0"))
      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "25"))
      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
      (rule "assignment" (formula "32") (term "1"))
      (builtin "One Step Simplification" (formula "32"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0"))
      (builtin "Use Operation Contract" (formula "32") (newnames "heapBefore_equalResult_0,result_2,exc_2") (contract "de.uni.trier.infsec.eVotingVerif.core.Setup[de.uni.trier.infsec.eVotingVerif.core.Setup::equalResult([I,[I)].JML normal_behavior operation contract.0"))
      (branch "Post (equalResult)"
         (builtin "One Step Simplification" (formula "25"))
         (builtin "One Step Simplification" (formula "33"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "26"))
         (rule "eqSymm" (formula "26") (term "1,0,0,1"))
         (rule "eqSymm" (formula "26"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0"))
         (rule "assignment" (formula "34") (term "1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "blockEmpty" (formula "34") (term "1"))
         (rule "apply_eq_monomials" (formula "26") (term "1,0,0,1,0,0,0,0") (ifseqformula "17"))
         (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "26") (term "1,0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "1,1,1,0,0,1,0,0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
         (rule "methodCallReturn" (formula "34") (term "1"))
         (rule "assignment" (formula "34") (term "1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "methodCallEmpty" (formula "34") (term "1"))
         (rule "tryEmpty" (formula "34") (term "1"))
         (rule "emptyModality" (formula "34") (term "1"))
         (builtin "One Step Simplification" (formula "34"))
         (rule "andRight" (formula "34"))
         (branch "Case 1"
            (rule "ifthenelse_split" (formula "34") (term "0") (userinteraction))
            (branch "∀ int k; ( k ≤ -1 ∨ k ≥ numberOfCandidates ∨ bsum{int j;}(0, c2.length, if ( k = c2[j]@heapAfter_computeResult_0) then (1) else (0)) = bsum{int j;}(0, c1.length, if ( k = c1[j]@heapAfter_computeResult_0) then (1) else (0))) TRUE"
               (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "27") (userinteraction))
               (rule "ifthenelse_split" (formula "35") (term "1") (userinteraction))
               (branch "∀ int i; ( i ≤ -1 ∨ i ≥ numberOfCandidates ∨ result_1[i]@heapAfter_computeResult_0 = result_0[i]@heapAfter_computeResult_0) TRUE"
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "closeTrue" (formula "36") (userinteraction))
               )
               (branch "∀ int i; ( i ≤ -1 ∨ i ≥ numberOfCandidates ∨ result_1[i]@heapAfter_computeResult_0 = result_0[i]@heapAfter_computeResult_0) FALSE"
                  (rule "allRight" (formula "35") (inst "sk=i_5") (userinteraction))
                  (rule "instAll" (formula "35") (term "0,0,0") (ifseqformula "24") (userinteraction))
                  (rule "instAll" (formula "36") (term "0,0,0") (ifseqformula "20") (userinteraction))
                  (rule "instAll" (formula "37") (term "0,0,0") (ifseqformula "3") (userinteraction))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "false_right" (formula "39"))
                  (rule "orRight" (formula "38"))
                  (rule "orRight" (formula "38"))
                  (rule "eqSymm" (formula "2") (term "0,2,0,1"))
                  (rule "eqSymm" (formula "3") (term "0,2,0,1"))
                  (rule "eqSymm" (formula "1") (term "0,2,1,1"))
                  (rule "eqSymm" (formula "1") (term "0,2,0,1"))
                  (rule "replace_known_right" (formula "3") (term "1,0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")))
                  (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "39"))
                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "38")))
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                  (rule "inEqSimp_geqRight" (formula "39"))
                  (rule "inEqSimp_leqRight" (formula "39"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "13"))
                  (rule "applyEq" (formula "6") (term "1,0,1,0") (ifseqformula "13"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "28") (term "1,0,1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "12"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "39") (term "1") (inst "selectSK=arr_747"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                  (rule "applyEq" (formula "5") (term "1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "36")))
                  (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=arr_748"))
                  (rule "applyEq" (formula "6") (term "1") (ifseqformula "1"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "20"))
                  (rule "eqSymm" (formula "40"))
                  (rule "eqSymm" (formula "4"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "35"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                  (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "39"))
                  (rule "equal_bsum3" (formula "39") (ifseqformula "4") (ifseqformula "5"))
                  (rule "allRight" (formula "39") (inst "sk=j_87"))
                  (rule "impRight" (formula "39"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "41"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,1") (inst "selectSK=arr_749"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "11")))
                  (rule "applyEqReverse" (formula "42") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "41") (term "0,0,0") (inst "selectSK=arr_750"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
                  (rule "eqSymm" (formula "42"))
                  (rule "eqSymm" (formula "42") (term "0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "12")))
                  (rule "applyEqReverse" (formula "42") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "41") (term "0,1"))
                  (rule "eqSymm" (formula "41"))
                  (rule "equal_bsum3" (formula "42") (ifseqformula "6") (ifseqformula "5"))
                  (rule "allRight" (formula "42") (inst "sk=j_88"))
                  (rule "impRight" (formula "42"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "44"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "44") (term "0,0,1") (inst "selectSK=arr_751"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "13")))
                  (rule "applyEqReverse" (formula "45") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "44") (term "0,0,0") (inst "selectSK=arr_752"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                  (rule "replaceKnownSelect_taclet10_0" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet11_0" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                  (rule "eqSymm" (formula "45"))
                  (rule "eqSymm" (formula "45") (term "0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "45") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "44") (term "0,1"))
                  (builtin "One Step Simplification" (formula "44"))
                  (rule "closeTrue" (formula "44"))
               )
            )
            (branch "∀ int k; ( k ≤ -1 ∨ k ≥ numberOfCandidates ∨ bsum{int j;}(0, c2.length, if ( k = c2[j]@heapAfter_computeResult_0) then (1) else (0)) = bsum{int j;}(0, c1.length, if ( k = c1[j]@heapAfter_computeResult_0) then (1) else (0))) FALSE"
               (rule "allRight" (formula "34") (inst "sk=k_4") (userinteraction))
               (rule "ifthenelse_split" (formula "26") (term "0") (userinteraction))
               (branch "∀ int i; ( i ≤ -1 ∨ i ≥ numberOfCandidates ∨ result_1[i]@heapAfter_computeResult_0 = result_0[i]@heapAfter_computeResult_0) TRUE"
                  (rule "instAll" (formula "35") (term "0,0,0") (ifseqformula "26") (userinteraction))
                  (rule "instAll" (formula "36") (term "0,0,0") (ifseqformula "24") (userinteraction))
                  (rule "instAll" (formula "37") (term "0,0,0") (ifseqformula "20") (userinteraction))
                  (rule "orRight" (formula "38"))
                  (rule "orRight" (formula "38"))
                  (rule "eqSymm" (formula "1") (term "0,2,0,1"))
                  (rule "eqSymm" (formula "41"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "notRight" (formula "41"))
                  (rule "eqSymm" (formula "3") (term "0,2,0,1"))
                  (rule "eqSymm" (formula "31"))
                  (rule "eqSymm" (formula "40") (term "0,2,1"))
                  (rule "eqSymm" (formula "40") (term "0,2,0"))
                  (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                  (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "39")))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "38"))
                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                  (rule "inEqSimp_leqRight" (formula "38"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "39"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                  (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "28") (term "1,0,1,0") (ifseqformula "12"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "5") (term "1") (inst "selectSK=arr_753"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "6"))
                  (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "33")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "5") (term "0,0,0") (ifseqformula "20"))
                  (rule "eqSymm" (formula "7"))
                  (rule "simplifySelectOfAnonEQ" (formula "7") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "37")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "0,0,0") (ifseqformula "20"))
                  (rule "eqSymm" (formula "40"))
                  (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "36"))
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "22")))
                  (rule "applyEq" (formula "4") (term "1") (ifseqformula "7"))
                  (rule "simplifySelectOfAnonEQ" (formula "7") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "37")) (ifInst ""  (formula "36")))
                  (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "7"))
                  (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "7"))
                  (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "7"))
                  (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "7"))
                  (rule "hideAuxiliaryEq" (formula "7"))
                  (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "33"))
                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "34")))
                  (rule "bsum_equal_split2" (formula "39") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "bsum_lower_equals_upper" (formula "39") (term "1,2,1"))
                  (rule "bsum_lower_equals_upper" (formula "39") (term "0,1,1"))
                  (rule "eqSymm" (formula "39") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "39") (term "2,0,2,1"))
                  (rule "polySimp_elimSub" (formula "39") (term "2,0,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "39") (term "0,0,1"))
                  (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                  (rule "add_literals" (formula "39") (term "0,0,1"))
                  (rule "leq_literals" (formula "39") (term "0,1"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "inEqSimp_commuteLeq" (formula "39") (term "0"))
                  (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "bsum_equal_split4" (formula "40") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "40"))
                  (rule "bsum_lower_equals_upper" (formula "40") (term "0,2,1"))
                  (rule "bsum_lower_equals_upper" (formula "40") (term "1,1,1"))
                  (rule "less_literals" (formula "40") (term "0,1"))
                  (builtin "One Step Simplification" (formula "40"))
                  (rule "eqSymm" (formula "40") (term "1"))
                  (rule "polySimp_elimSub" (formula "40") (term "2,0,1"))
                  (rule "polySimp_addComm0" (formula "40") (term "2,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "40") (term "0"))
                  (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "40"))
                  (rule "bsum_equal_split4" (formula "41") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "bsum_lower_equals_upper" (formula "41") (term "1,1,1"))
                  (rule "bsum_lower_equals_upper" (formula "41") (term "0,2,1"))
                  (rule "less_literals" (formula "41") (term "0,1"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "eqSymm" (formula "41") (term "1"))
                  (rule "polySimp_elimSub" (formula "41") (term "2,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0"))
                  (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "41"))
                  (rule "bsum_equal_split2" (formula "42") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "42"))
                  (rule "bsum_lower_equals_upper" (formula "42") (term "0,1,1"))
                  (rule "bsum_lower_equals_upper" (formula "42") (term "1,2,1"))
                  (rule "eqSymm" (formula "42") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "42") (term "2,0,2,1"))
                  (rule "polySimp_elimSub" (formula "42") (term "2,0,1,1"))
                  (rule "replace_known_right" (formula "42") (term "1,1") (ifseqformula "41"))
                  (rule "inEqSimp_ltToLeq" (formula "42") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "42") (term "0,0,1"))
                  (rule "add_literals" (formula "42") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "42") (term "1,0,0,1"))
                  (rule "add_literals" (formula "42") (term "0,0,1"))
                  (rule "leq_literals" (formula "42") (term "0,1"))
                  (builtin "One Step Simplification" (formula "42"))
                  (rule "polySimp_addComm0" (formula "42") (term "2,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "42") (term "0"))
                  (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "42"))
                  (rule "equal_bsum2" (formula "43") (ifseqformula "6"))
                  (rule "allRight" (formula "43") (inst "sk=j_89"))
                  (rule "impRight" (formula "43"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "45") (term "0,0,1") (inst "selectSK=arr_754"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
                  (rule "eqSymm" (formula "46") (term "0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "11")))
                  (rule "applyEqReverse" (formula "46") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "45") (term "0,1"))
                  (rule "pullOutSelect" (formula "45") (term "0,0,0") (inst "selectSK=arr_755"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "22"))
                  (rule "eqSymm" (formula "46") (term "0,0"))
                  (rule "eqSymm" (formula "46"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "12")))
                  (rule "applyEqReverse" (formula "46") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "45") (term "0,1"))
                  (rule "eqSymm" (formula "45"))
                  (rule "equal_bsum2" (formula "46") (ifseqformula "6"))
                  (rule "allRight" (formula "46") (inst "sk=j_90"))
                  (rule "impRight" (formula "46"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "48"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,1") (inst "selectSK=arr_756"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "13")))
                  (rule "applyEqReverse" (formula "49") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,0") (inst "selectSK=arr_757"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                  (rule "replaceKnownSelect_taclet10_0" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet11_0" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
                  (rule "eqSymm" (formula "49") (term "0,0"))
                  (rule "eqSymm" (formula "49"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "48") (term "0,1"))
                  (builtin "One Step Simplification" (formula "48"))
                  (rule "closeTrue" (formula "48"))
               )
               (branch "∀ int i; ( i ≤ -1 ∨ i ≥ numberOfCandidates ∨ result_1[i]@heapAfter_computeResult_0 = result_0[i]@heapAfter_computeResult_0) FALSE"
                  (rule "close" (formula "36") (ifseqformula "26"))
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "34") (inst "sk=f_0"))
            (rule "allRight" (formula "34") (inst "sk=o_0"))
            (rule "orRight" (formula "34"))
            (rule "eqSymm" (formula "35"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
            (rule "applyEq" (formula "22") (term "1,0,1,0") (ifseqformula "6"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
            (rule "eqSymm" (formula "35"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "ifthenelse_split" (formula "26") (term "0"))
            (branch "∀ int i; ( i ≤ -1 ∨ i ≥ numberOfCandidates ∨ result_1[i]@heapAfter_computeResult_0 = result_0[i]@heapAfter_computeResult_0) TRUE"
               (rule "eqSymm" (formula "27"))
               (rule "cut_direct" (formula "35") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "false_right" (formula "36"))
                  (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: o_0 = null FALSE"
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "notRight" (formula "36"))
                  (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "36"))
                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "37")))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "∀ int i; ( i ≤ -1 ∨ i ≥ numberOfCandidates ∨ result_1[i]@heapAfter_computeResult_0 = result_0[i]@heapAfter_computeResult_0) FALSE"
               (rule "allRight" (formula "27") (inst "sk=i_0"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "eqSymm" (formula "26"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "inEqSimp_leqRight" (formula "27"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "29") (term "1") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
               (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "34")))
               (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=arr_2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "30"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
               (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "29"))
               (rule "cut_direct" (formula "37") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                  (builtin "One Step Simplification" (formula "38"))
                  (rule "false_right" (formula "38"))
                  (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "38")))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "CUT: o_0 = null FALSE"
                  (builtin "One Step Simplification" (formula "38"))
                  (rule "notRight" (formula "38"))
                  (rule "replace_known_left" (formula "4") (term "0,0,1,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
      )
      (branch "Exceptional Post (equalResult)"
         (builtin "One Step Simplification" (formula "25"))
         (builtin "One Step Simplification" (formula "33"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,0") (ifseqformula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0") (ifseqformula "14"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "27"))
         (rule "notLeft" (formula "25"))
         (rule "close" (formula "28") (ifseqformula "27"))
      )
      (branch "Pre (equalResult)"
         (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "29")) (ifInst ""  (formula "25")) (ifInst ""  (formula "29")) (ifInst ""  (formula "25")))
         (rule "andRight" (formula "32"))
         (branch "Case 1"
            (rule "eqSymm" (formula "32"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "21"))
            (rule "eqSymm" (formula "31"))
            (rule "close" (formula "31") (ifseqformula "16"))
         )
         (branch "Case 2"
            (rule "andRight" (formula "32"))
            (branch "Case 1"
               (rule "andRight" (formula "32"))
               (branch "Case 1"
                  (rule "wellFormedAnonEQ" (formula "32") (ifseqformula "20"))
                  (rule "wellFormedAnonEQ" (formula "32") (term "0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "1")) (ifInst ""  (formula "13")))
                  (rule "closeTrue" (formula "32"))
               )
               (branch "Case 2"
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0") (ifseqformula "14"))
                  (rule "orRight" (formula "32"))
                  (rule "orRight" (formula "32"))
                  (rule "close" (formula "32") (ifseqformula "16"))
               )
            )
            (branch "Case 2"
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (ifseqformula "20"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0") (ifseqformula "14"))
               (rule "orRight" (formula "32"))
               (rule "close" (formula "33") (ifseqformula "21"))
            )
         )
      )
   )
   (branch "Exceptional Post (computeResult)"
      (builtin "One Step Simplification" (formula "25"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,1,1,0,1,1") (ifseqformula "14"))
      (rule "andLeft" (formula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0") (ifseqformula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,0") (ifseqformula "14"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "21"))
      (rule "close" (formula "24") (ifseqformula "23"))
   )
   (branch "Pre (computeResult)"
      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "8")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
      (rule "andRight" (formula "23"))
      (branch "Case 1"
         (rule "allRight" (formula "23") (inst "sk=j_1"))
         (rule "impRight" (formula "23"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1"))
         (rule "mul_literals" (formula "24") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "pullOutSelect" (formula "24") (term "0,0") (inst "selectSK=arr_0"))
         (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")))
         (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "allLeft" (formula "13") (inst "t=j_1"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "13") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0"))
         (rule "leq_literals" (formula "13") (term "0,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_geqRight" (formula "25"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "allLeft" (formula "13") (inst "t=j_1"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
         (rule "inEqSimp_contradInEq0" (formula "13") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "13") (term "0,1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "13") (term "0,0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "3"))
         (rule "andLeft" (formula "13"))
         (rule "inEqSimp_homoInEq1" (formula "13"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,0"))
         (rule "add_literals" (formula "13") (term "0"))
         (rule "leq_literals" (formula "13"))
         (rule "closeFalse" (formula "13"))
      )
      (branch "Case 2"
         (rule "andRight" (formula "23"))
         (branch "Case 1"
            (rule "wellFormedAnonEQ" (formula "23") (ifseqformula "14"))
            (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "23"))
         )
         (branch "Case 2"
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (ifseqformula "14"))
            (rule "orRight" (formula "23"))
            (rule "close" (formula "23") (ifseqformula "3"))
         )
      )
   )
)
(branch "Exceptional Post (computeResult)"
   (builtin "One Step Simplification" (formula "14"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "14"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "15"))
   (rule "close" (formula "18") (ifseqformula "17"))
)
(branch "Pre (computeResult)"
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "8")) (ifInst ""  (formula "14")) (ifInst ""  (formula "1")) (ifInst ""  (formula "14")) (ifInst ""  (formula "2")))
   (rule "allRight" (formula "15") (inst "sk=j_0") (userinteraction))
   (rule "instAll" (formula "15") (term "1,0,0") (ifseqformula "10") (userinteraction))
   (rule "instAll" (formula "16") (term "1,0,0") (ifseqformula "10") (userinteraction))
   (rule "impRight" (formula "17"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
   (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1"))
   (rule "mul_literals" (formula "18") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "4") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "3") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0"))
   (rule "leq_literals" (formula "3") (term "0,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "5"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_literals" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)

}
