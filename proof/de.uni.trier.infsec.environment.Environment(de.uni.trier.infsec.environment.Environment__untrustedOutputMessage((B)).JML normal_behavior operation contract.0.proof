\settings {
"#Proof-Settings-Config-File
#Fri Oct 19 10:53:09 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=true
[View]HideClosedSubtrees=true
[General]UseOCL=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=1000
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\bootclasspath "../stubs";

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Oct 19 10:53:09 CEST 2012
name=de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment\\:\\:untrustedOutputMessage([B)].JML normal_behavior operation contract.0
contract=de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment\\:\\:untrustedOutputMessage([B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "5fe247a5e3ac10114c6c162945c17f94008d90d9"))

(autoModeTime "1763")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "4"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "commuteUnion" (formula "5") (term "1,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "1") (ifseqformula "4"))
(builtin "One Step Simplification" (formula "2"))
(rule "disjointToElementOf" (formula "3") (inst "ov=ov") (inst "fv=fv"))
(builtin "One Step Simplification" (formula "3"))
(rule "subsetToElementOf" (formula "5") (term "0,0,0,1") (inst "ov=ov") (inst "fv=fv"))
(rule "elementOfUnion" (formula "5") (term "1,0,0,0,0,0,1"))
(builtin "One Step Simplification" (formula "5"))
(rule "nnf_imp2or" (formula "5") (term "0,0,0,0,0,1"))
(rule "swapQuantifiersAll" (formula "3"))
(rule "commute_or" (formula "3") (term "0,0"))
(builtin "One Step Simplification" (formula "3"))
(rule "castDel" (formula "3") (term "0,0,0,0"))
(rule "instanceof_static_type" (formula "3") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "3"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_untrustedOutputMessage"))
(builtin "One Step Simplification" (formula "5"))
(rule "methodCallUnfoldArguments" (formula "5") (term "1"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "var"))
(rule "assignment_read_length" (formula "5"))
(branch "Normal Execution (_t != null)"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_untrustedOutput,exc_0,heapAfter_untrustedOutput,anon_heap_untrustedOutput") (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::untrustedOutput(int)].JML normal_behavior operation contract.0"))
   (branch "Post (untrustedOutput)"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "commuteUnion" (formula "7") (term "1"))
      (rule "subsetToElementOf" (formula "7") (inst "ov=ov") (inst "fv=fv"))
      (rule "elementOfUnion" (formula "7") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "nnf_imp2or" (formula "7") (term "0,0"))
      (rule "commute_or" (formula "7") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "7") (term "1,0,0"))
      (rule "commute_or" (formula "7") (term "1,1,0,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or_2" (formula "8") (term "0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0"))
      (rule "swapQuantifiersAll" (formula "7"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "typeEqDerived2" (formula "7") (term "0,0,1,0") (ifseqformula "6"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "castDel" (formula "7") (term "0,1,0"))
      (rule "castDel" (formula "7") (term "0,0,0,0"))
      (rule "commute_or" (formula "7") (term "0"))
      (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_untrustedOutputMessage_helper,exc_1,heapAfter_untrustedOutputMessage_helper,anon_heap_untrustedOutputMessage_helper") (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::untrustedOutputMessage_helper([B)].JML normal_behavior operation contract.0"))
      (branch "Post (untrustedOutputMessage_helper)"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "commuteUnion" (formula "12") (term "1"))
         (rule "subsetToElementOf" (formula "12") (inst "ov=ov") (inst "fv=fv"))
         (rule "elementOfUnion" (formula "12") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "selectCreatedOfAnonEQ" (formula "12") (term "0,0,1,0,1,0,0") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "nnf_imp2or" (formula "12") (term "0,0"))
         (rule "nnf_notOr" (formula "12") (term "1,0,1,0,0"))
         (rule "commute_or" (formula "12") (term "1,0,0"))
         (rule "cnf_rightDist" (formula "12") (term "1,0,0"))
         (rule "commute_or" (formula "12") (term "1,1,0,0"))
         (rule "cnf_rightDist" (formula "12") (term "1,1,0,0"))
         (rule "commute_or" (formula "12") (term "1,1,1,0,0"))
         (rule "cnf_rightDist" (formula "12") (term "0,0"))
         (rule "distr_forallAnd" (formula "12") (term "0"))
         (rule "distr_forallAnd" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "commute_or" (formula "13") (term "0,0"))
         (rule "shift_paren_or" (formula "12") (term "0,0"))
         (rule "swapQuantifiersAll" (formula "12"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "typeEqDerived2" (formula "12") (term "0,0,1,0") (ifseqformula "6"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "castDel" (formula "12") (term "0,0,0,0"))
         (rule "castDel" (formula "12") (term "0,1,0"))
         (rule "commute_or" (formula "12") (term "0"))
         (rule "cnf_rightDist" (formula "13") (term "0,0"))
         (rule "distr_forallAnd" (formula "13") (term "0"))
         (rule "distr_forallAnd" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "commute_or_2" (formula "14") (term "0,0"))
         (rule "shift_paren_or" (formula "13") (term "0,0"))
         (rule "commute_or" (formula "13") (term "0,0,0"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "tryEmpty" (formula "16") (term "1"))
         (rule "emptyModality" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "eqSymm" (formula "16") (term "1,0,0,1"))
         (rule "selectOfAnonEQ" (formula "16") (term "0,1,0,0,1") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,0,1,1,0,0,1,0,0,1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "selectOfAnonEQ" (formula "16") (term "2,0,1,0,0,1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "nnf_notOr" (formula "16") (term "1,1,0,0,1,0,0,1"))
         (rule "andRight" (formula "16"))
         (branch
            (rule "allRight" (formula "16") (inst "sk=ov_1"))
            (rule "allRight" (formula "16") (inst "sk=fv_1"))
            (rule "orRight" (formula "16"))
            (rule "orRight" (formula "17"))
            (rule "notRight" (formula "16"))
            (rule "cut_direct" (formula "17") (term "0,0"))
            (branch "CUT: ov_1 = null TRUE"
               (builtin "One Step Simplification" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
               (rule "allLeft" (formula "9") (inst "t=fv_1"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "allLeft" (formula "14") (inst "t=fv_1"))
               (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")))
               (rule "closeFalse" (formula "14"))
            )
            (branch "CUT: ov_1 = null FALSE"
               (builtin "One Step Simplification" (formula "18"))
               (rule "notRight" (formula "18"))
               (rule "allLeft" (formula "10") (inst "t=ov_1"))
               (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "allLeft" (formula "10") (inst "t=fv_1"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "notLeft" (formula "10"))
               (rule "allLeft" (formula "17") (inst "t=ov_1"))
               (rule "cut_direct" (formula "17") (term "0,1,0"))
               (branch "CUT: boolean::select(anon_heap_untrustedOutput, ov_1, <created>) = TRUE TRUE"
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "allLeft" (formula "18") (inst "t=fv_1"))
                  (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "21"))
                  (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "18"))
               )
               (branch "CUT: boolean::select(anon_heap_untrustedOutput, ov_1, <created>) = TRUE FALSE"
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "allLeft" (formula "16") (inst "t=ov_1"))
                  (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "allLeft" (formula "16") (inst "t=fv_1"))
                  (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "21"))
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "16"))
               )
            )
         )
         (branch
            (rule "allRight" (formula "16") (inst "sk=f_0"))
            (rule "allRight" (formula "16") (inst "sk=o_0"))
            (rule "orRight" (formula "16"))
            (rule "orRight" (formula "16"))
            (rule "replace_known_right" (formula "18") (term "0,0,0,2,0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
            (rule "orRight" (formula "18"))
            (rule "notRight" (formula "18"))
            (rule "cut_direct" (formula "18") (term "0,0"))
            (branch "CUT: o_0 = null TRUE"
               (builtin "One Step Simplification" (formula "19"))
               (rule "false_right" (formula "19"))
               (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "notLeft" (formula "3"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "20") (term "1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "20") (term "1,1") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "allLeft" (formula "9") (inst "t=f_0"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "20"))
               (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "9"))
            )
            (branch "CUT: o_0 = null FALSE"
               (builtin "One Step Simplification" (formula "19"))
               (rule "notRight" (formula "19"))
               (rule "replace_known_left" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "19")))
               (rule "andLeft" (formula "2"))
               (rule "notLeft" (formula "3"))
               (rule "allLeft" (formula "10") (inst "t=o_0"))
               (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "allLeft" (formula "10") (inst "t=f_0"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "10"))
            )
         )
      )
      (branch "Exceptional Post (untrustedOutputMessage_helper)"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "selectCreatedOfAnonEQ" (formula "11") (term "0,1,0") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "selectCreatedOfAnonEQ" (formula "11") (term "0,0,1,0") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "close" (formula "14") (ifseqformula "13"))
      )
      (branch "Pre (untrustedOutputMessage_helper)"
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
         (rule "selectCreatedOfAnonEQ" (formula "10") (term "0,1,1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
         (rule "wellFormedAnonEQ" (formula "10") (term "1") (ifseqformula "5"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "4")))
         (rule "disjointToElementOf" (formula "10") (inst "ov=ov") (inst "fv=fv"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "allRight" (formula "10") (inst "sk=ov_0"))
         (rule "allRight" (formula "10") (inst "sk=fv_0"))
         (rule "orRight" (formula "10"))
         (rule "notRight" (formula "11"))
         (rule "notRight" (formula "11"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "allLeft" (formula "10") (inst "t=t"))
         (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "allLeft" (formula "10") (inst "t=fv_0"))
         (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "allLeft" (formula "5") (inst "t=fv_0"))
         (rule "notLeft" (formula "5"))
         (rule "close" (formula "13") (ifseqformula "10"))
      )
   )
   (branch "Exceptional Post (untrustedOutput)"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "5"))
      (rule "selectCreatedOfAnonEQ" (formula "6") (term "0,1,0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "6"))
      (rule "close" (formula "9") (ifseqformula "8"))
   )
   (branch "Pre (untrustedOutput)"
      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
      (rule "closeTrue" (formula "5"))
   )
)
(branch "Null Reference (_t = null)"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
   (rule "closeFalse" (formula "1"))
)
)

}
