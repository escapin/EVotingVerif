\settings {
"#Proof-Settings-Config-File
#Fri Oct 19 10:54:35 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=true
[View]HideClosedSubtrees=true
[General]UseOCL=false
[View]ShowWholeTaclet=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=1000
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\bootclasspath "../stubs";

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Fri Oct 19 10:54:35 CEST 2012
name=de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment\\:\\:untrustedInputMessage_helper([B)].JML normal_behavior operation contract.0
contract=de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment\\:\\:untrustedInputMessage_helper([B)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "5fe247a5e3ac10114c6c162945c17f94008d90d9"))

(autoModeTime "1538")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "commuteUnion" (formula "5") (term "1,0,1,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "1") (ifseqformula "4"))
(builtin "One Step Simplification" (formula "2"))
(rule "disjointToElementOf" (formula "3") (inst "ov=ov") (inst "fv=fv"))
(builtin "One Step Simplification" (formula "3"))
(rule "disjointToElementOf" (formula "5") (term "0,0,0,0,1") (inst "ov=ov") (inst "fv=fv"))
(builtin "One Step Simplification" (formula "5"))
(rule "subsetToElementOf" (formula "5") (term "0,1,0,0,0,1") (inst "ov=ov") (inst "fv=fv"))
(rule "elementOfUnion" (formula "5") (term "0,0,0,0,1,0,1"))
(builtin "One Step Simplification" (formula "5"))
(rule "elementOfUnion" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(builtin "One Step Simplification" (formula "5"))
(rule "nnf_imp2or" (formula "5") (term "0,0,0,1,0,0,0,1"))
(rule "swapQuantifiersAll" (formula "3"))
(rule "swapQuantifiersAll" (formula "5") (term "0,0,0,0,1"))
(rule "commute_or" (formula "3") (term "0,0"))
(builtin "One Step Simplification" (formula "3"))
(rule "castDel" (formula "3") (term "0,0,0,0"))
(rule "instanceof_static_type" (formula "3") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "3"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_untrustedInputMessage_helper"))
(builtin "One Step Simplification" (formula "5"))
(rule "for_to_while" (formula "5") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "i"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(builtin "Loop Invariant" (formula "5") (newnames "heapBeforeLoop,iBeforeLoop,i_0,anon_heap_loop,o,f,variant,b"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
   (rule "leq_literals" (formula "5") (term "0,0,0,1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "commuteUnion" (formula "5") (term "1,1,1"))
   (rule "translateJavaSubInt" (formula "5") (term "1,0"))
   (rule "polySimp_elimSub" (formula "5") (term "1,0"))
   (rule "times_zero_2" (formula "5") (term "1,1,0"))
   (rule "add_zero_right" (formula "5") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
   (rule "disjointToElementOf" (formula "5") (term "1,0,1") (inst "ov=ov") (inst "fv=fv"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "subsetToElementOf" (formula "5") (term "1,1") (inst "ov=ov") (inst "fv=fv"))
   (rule "elementOfUnion" (formula "5") (term "1,0,0,1,1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "nnf_imp2or" (formula "5") (term "0,0,1,1"))
   (rule "swapQuantifiersAll" (formula "5") (term "1,0,1"))
   (rule "cut_direct" (formula "5") (term "0"))
   (branch "CUT: returnval.length >= 0 TRUE"
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
      (rule "andRight" (formula "6"))
      (branch
         (rule "allRight" (formula "6") (inst "sk=fv_8"))
         (rule "allRight" (formula "6") (inst "sk=ov_8"))
         (rule "orRight" (formula "6"))
         (rule "notRight" (formula "7"))
         (rule "notRight" (formula "7"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "allLeft" (formula "6") (inst "t=fv_8"))
         (rule "notLeft" (formula "6"))
         (rule "close" (formula "7") (ifseqformula "2"))
      )
      (branch
         (rule "allRight" (formula "6") (inst "sk=ov_7"))
         (rule "allRight" (formula "6") (inst "sk=fv_7"))
         (rule "orRight" (formula "6"))
         (rule "orRight" (formula "7"))
         (rule "notRight" (formula "6"))
         (rule "close" (formula "8") (ifseqformula "1"))
      )
   )
   (branch "CUT: returnval.length >= 0 FALSE"
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
      (rule "false_right" (formula "6"))
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "arrayLengthIsAShort" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "arrayLengthNotNegative" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_2"))
   (rule "variableDeclarationAssign" (formula "11") (term "1,0,1"))
   (rule "blockThrow" (formula "11") (term "1,0,0,1,0,1"))
   (rule "blockThrow" (formula "11") (term "1,0,0,1,0,1"))
   (rule "variableDeclaration" (formula "11") (term "1,0,1") (newnames "exc_2"))
   (rule "assignment" (formula "11") (term "1,0,1"))
   (rule "variableDeclaration" (formula "11") (term "1,1,0,1") (newnames "thrownExc"))
   (rule "translateJavaSubInt" (formula "9") (term "1"))
   (rule "commuteUnion" (formula "8") (term "1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
   (rule "commuteUnion" (formula "11") (term "1,1,0,0,1,1,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1,0"))
   (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1,1,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "1,0,1,1,1,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "9") (term "1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,1,1,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,1,1,0,1,1,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "9"))
   (rule "times_zero_2" (formula "9") (term "1,0"))
   (rule "add_zero_right" (formula "9") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,1,1,0,1,1,0,1"))
   (rule "times_zero_2" (formula "11") (term "1,0,0,1,1,1,0,1,1,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,1,1,0,1,1,0,1"))
   (rule "disjointToElementOf" (formula "7") (inst "ov=ov") (inst "fv=fv"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "disjointToElementOf" (formula "11") (term "1,0,0,0,1,1,0,1,1,0,1") (inst "ov=ov") (inst "fv=fv"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "subsetToElementOf" (formula "8") (inst "ov=ov") (inst "fv=fv"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1"))
   (rule "polySimp_elimOne" (formula "9") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "0,1,1,1,1,1,0,1,1,0,1"))
   (rule "mul_literals" (formula "10") (term "0,0,1,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,1,1,1,1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0,1,1,1,1,1,0,1,1,0,1"))
   (rule "subsetToElementOf" (formula "10") (term "1,0,0,1,1,0,1,1,0,1") (inst "ov=ov") (inst "fv=fv"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,1,1,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,1,1,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0,1,1,1,0,1,1,0,1"))
   (rule "elementOfUnion" (formula "10") (term "0,0,0,0,1,0,1,1,0,1,1,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "elementOfUnion" (formula "8") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "elementOfUnion" (formula "10") (term "1,0,0,1,0,0,1,1,0,1,1,0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "nnf_imp2or" (formula "8") (term "0,0"))
   (rule "nnf_imp2or" (formula "10") (term "0,0,1,0,0,1,1,0,1,1,0,1"))
   (rule "swapQuantifiersAll" (formula "7"))
   (rule "swapQuantifiersAll" (formula "10") (term "1,0,0,0,1,1,0,1,1,0,1"))
   (rule "commute_or" (formula "8") (term "1,0,0"))
   (rule "commute_or" (formula "7") (term "0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "castDel" (formula "7") (term "0,0,0,0"))
   (rule "instanceof_static_type" (formula "7") (term "0,0,1,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "cnf_rightDist" (formula "8") (term "1,0,0"))
   (rule "commute_or" (formula "8") (term "1,1,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0"))
   (rule "distr_forallAnd" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or_2" (formula "9") (term "0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0"))
   (rule "swapQuantifiersAll" (formula "8"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "castDel" (formula "8") (term "0,0,0,0,0"))
   (rule "castDel" (formula "8") (term "0,1,0,0"))
   (rule "instanceof_not_compatible" (formula "8") (term "0,1,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "commute_or" (formula "8") (term "0"))
   (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_3"))
   (rule "assignment_read_length" (formula "11"))
   (branch "Normal Execution (_returnval != null)"
      (builtin "One Step Simplification" (formula "11"))
      (rule "less_than_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "impRight" (formula "11"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0"))
      (rule "qeq_literals" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
      (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_6"))
      (rule "assignment_read_length" (formula "11"))
      (branch "Normal Execution (_returnval != null)"
         (builtin "One Step Simplification" (formula "11"))
         (rule "less_than_comparison_simple" (formula "11") (term "1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
         (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "ifSplit" (formula "11"))
         (branch "if x_4 true"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "1"))
            (rule "eval_order_array_access3" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_7"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_8"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_8"))
            (rule "compound_assignment_5_nonsimple" (formula "11") (term "1"))
            (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x_9"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_9"))
            (rule "compound_less_equal_than_comparison_1" (formula "11") (term "1") (inst "#v0=x_10"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_10"))
            (rule "assignment_read_length" (formula "11"))
            (branch "Normal Execution (_returnval != null)"
               (builtin "One Step Simplification" (formula "11"))
               (rule "less_equal_than_comparison_simple" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0,1,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,0,0,1,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "arrayLengthIsAShort" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "arrayLengthNotNegative" (formula "1") (term "0"))
               (rule "ifElse" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "less_than_comparison_simple" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "blockEmpty" (formula "12") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "1,0,0,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,1,0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "12") (term "0,0,0,1,0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "if" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_11"))
               (rule "compound_byte_cast_expression" (formula "12") (term "1") (inst "#v=x_12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_12"))
               (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_untrustedInput,result_1,exc_3,heapAfter_untrustedInput,anon_heap_untrustedInput") (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::untrustedInput()].JML normal_behavior operation contract.0"))
               (branch "Post (untrustedInput)"
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "14"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "commuteUnion" (formula "14") (term "1"))
                  (rule "subsetToElementOf" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                  (rule "elementOfUnion" (formula "14") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "nnf_imp2or" (formula "14") (term "0,0"))
                  (rule "nnf_notOr" (formula "14") (term "1,0,1,0,0"))
                  (rule "commute_or" (formula "14") (term "1,0,0"))
                  (rule "cnf_rightDist" (formula "14") (term "1,0,0"))
                  (rule "commute_or" (formula "14") (term "1,1,0,0"))
                  (rule "cnf_rightDist" (formula "14") (term "1,1,0,0"))
                  (rule "commute_or" (formula "14") (term "1,1,1,0,0"))
                  (rule "cnf_rightDist" (formula "14") (term "0,0"))
                  (rule "distr_forallAnd" (formula "14") (term "0"))
                  (rule "distr_forallAnd" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "commute_or" (formula "15") (term "0,0"))
                  (rule "shift_paren_or" (formula "14") (term "0,0"))
                  (rule "swapQuantifiersAll" (formula "14"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "typeEqDerived2" (formula "14") (term "0,0,1,0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "castDel" (formula "14") (term "0,0,0,0"))
                  (rule "castDel" (formula "14") (term "0,1,0"))
                  (rule "cnf_rightDist" (formula "15") (term "0,0"))
                  (rule "distr_forallAnd" (formula "15") (term "0"))
                  (rule "distr_forallAnd" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "commute_or_2" (formula "16") (term "0,0"))
                  (rule "commute_or" (formula "16") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "0,0"))
                  (rule "narrowingByteCastInt" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "assignment_to_primitive_array_component" (formula "18"))
                  (branch "Normal Execution (x_arr != null)"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "blockEmpty" (formula "18") (term "1"))
                     (rule "translateJavaCastByte" (formula "18") (term "3,0,1,0"))
                     (rule "postincrement" (formula "18") (term "1"))
                     (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_13"))
                     (rule "remove_parentheses_right" (formula "18") (term "1"))
                     (rule "assignmentAdditionInt" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "18") (term "1"))
                     (rule "assignment" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "tryEmpty" (formula "18") (term "1"))
                     (rule "methodCallEmpty" (formula "18") (term "1"))
                     (rule "emptyModality" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
                     (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,1,1"))
                     (rule "add_literals" (formula "18") (term "0,0,1,1"))
                     (rule "add_zero_left" (formula "18") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "18") (term "1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1"))
                     (rule "add_literals" (formula "18") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "18") (term "0,1,1"))
                     (rule "add_zero_left" (formula "18") (term "1,1"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1"))
                     (rule "add_literals" (formula "18") (term "1,0,1"))
                     (rule "times_zero_1" (formula "18") (term "0,1"))
                     (rule "qeq_literals" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "18") (term "0,0,0") (ifseqformula "7"))
                     (rule "leq_literals" (formula "18") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "selectOfStore" (formula "18") (term "0,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "castDel" (formula "18") (term "1,0,1,0,0,1"))
                     (rule "eqSymm" (formula "18") (term "1,0,0,1,0,0,1"))
                     (rule "eqSymm" (formula "18") (term "0,0,0,1,0,0,1"))
                     (rule "selectOfAnonEQ" (formula "18") (term "2,0,1,0,0,1") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "selectOfAnon" (formula "18") (term "2,2,0,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "elementOfUnion" (formula "18") (term "0,0,0,2,2,0,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "nnf_notOr" (formula "18") (term "1,1,0,2,0,1,0,0,1"))
                     (rule "andRight" (formula "18"))
                     (branch
                        (rule "andRight" (formula "18"))
                        (branch
                           (rule "allRight" (formula "18") (inst "sk=fv_5"))
                           (rule "allRight" (formula "18") (inst "sk=ov_5"))
                           (rule "orRight" (formula "18"))
                           (rule "notRight" (formula "19"))
                           (rule "notRight" (formula "19"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "selectOfStore" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "7")))
                           (rule "true_left" (formula "2"))
                           (builtin "Use Dependency Contract" (formula "10") (term "2,0,0") (ifInst ""  (formula "18") (term "0,1,0,2,1,0,0,0")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                           (builtin "Use Dependency Contract" (formula "16") (term "2,0,0,0") (ifInst ""  (formula "18") (term "2,1,0,0,0")) (ifInst ""  (formula "14")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                           (builtin "Use Dependency Contract" (formula "18") (term "2,0,0,0,0,0") (ifInst ""  (formula "18") (term "0,1,0,2,1,0,0,0")) (ifInst ""  (formula "14")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                           (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "18") (term "2,0,0,0,0,0")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                           (rule "wellFormedStorePrimitiveArray" (formula "19") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "wellFormedAnonEQ" (formula "19") (term "0,0") (ifseqformula "14"))
                           (rule "wellFormedAnon" (formula "19") (term "0,0,0"))
                           (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
                           (rule "disjointToElementOf" (formula "19") (term "0") (inst "ov=ov") (inst "fv=fv"))
                           (rule "elementOfSingleton" (formula "19") (term "0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                           (rule "cut_direct" (formula "19") (term "1"))
                           (branch "CUT: de.uni.trier.infsec.environment.Environment::$envLocs(store(heapAfter_untrustedInput, returnval, arr(i_0), result_1)) = de.uni.trier.infsec.environment.Environment::$envLocs(heapAfter_untrustedInput) TRUE"
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "applyEq" (formula "2") (term "2") (ifseqformula "19"))
                              (rule "allLeft" (formula "17") (inst "t=returnval"))
                              (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "6"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "allLeft" (formula "17") (inst "t=fv_5"))
                              (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "allLeft" (formula "10") (inst "t=fv_5"))
                              (rule "notLeft" (formula "10"))
                              (rule "close" (formula "22") (ifseqformula "17"))
                           )
                           (branch "CUT: de.uni.trier.infsec.environment.Environment::$envLocs(store(heapAfter_untrustedInput, returnval, arr(i_0), result_1)) = de.uni.trier.infsec.environment.Environment::$envLocs(heapAfter_untrustedInput) FALSE"
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "allRight" (formula "19") (inst "sk=ov_6"))
                              (rule "allRight" (formula "19") (inst "sk=fv_6"))
                              (rule "orRight" (formula "19"))
                              (rule "notRight" (formula "20"))
                              (rule "orRight" (formula "20"))
                              (rule "notRight" (formula "20"))
                              (rule "notRight" (formula "21"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                              (rule "allLeft" (formula "20") (inst "t=returnval"))
                              (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "allLeft" (formula "20") (inst "t=arr(i_0)"))
                              (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "allLeft" (formula "13") (inst "t=arr(i_0)"))
                              (rule "notLeft" (formula "13"))
                              (rule "close" (formula "24") (ifseqformula "20"))
                           )
                        )
                        (branch
                           (rule "allRight" (formula "18") (inst "sk=ov_2"))
                           (rule "allRight" (formula "18") (inst "sk=fv_2"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "19"))
                           (rule "notRight" (formula "18"))
                           (rule "cut_direct" (formula "19") (term "0,0"))
                           (branch "CUT: ov_2 = null TRUE"
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "false_right" (formula "20"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                              (rule "allLeft" (formula "11") (inst "t=fv_2"))
                              (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "21"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "notLeft" (formula "11"))
                              (rule "allLeft" (formula "16") (inst "t=fv_2"))
                              (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "notLeft" (formula "16"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (builtin "Use Dependency Contract" (formula "10") (term "2,0,0") (ifInst ""  (formula "22") (term "2")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (builtin "Use Dependency Contract" (formula "16") (term "2,0,0,0") (ifInst ""  (formula "20") (term "2")) (ifInst ""  (formula "14")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (builtin "Use Dependency Contract" (formula "18") (term "2,0,0,0,0,0") (ifInst ""  (formula "22") (term "2")) (ifInst ""  (formula "14")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "19") (term "2")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "19") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "wellFormedAnonEQ" (formula "19") (term "0,0") (ifseqformula "14"))
                              (rule "wellFormedAnon" (formula "19") (term "0,0,0"))
                              (rule "replace_known_left" (formula "19") (term "1,0,0,0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")) (ifInst ""  (formula "13")))
                              (rule "disjointToElementOf" (formula "19") (term "0") (inst "ov=ov") (inst "fv=fv"))
                              (rule "elementOfSingleton" (formula "19") (term "0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                              (rule "cut_direct" (formula "19") (term "1"))
                              (branch "CUT: de.uni.trier.infsec.environment.Environment::$envLocs(store(heapAfter_untrustedInput, returnval, arr(i_0), result_1)) = de.uni.trier.infsec.environment.Environment::$envLocs(heapAfter_untrustedInput) TRUE"
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "2") (term "2") (ifseqformula "19"))
                                 (rule "close" (formula "20") (ifseqformula "2"))
                              )
                              (branch "CUT: de.uni.trier.infsec.environment.Environment::$envLocs(store(heapAfter_untrustedInput, returnval, arr(i_0), result_1)) = de.uni.trier.infsec.environment.Environment::$envLocs(heapAfter_untrustedInput) FALSE"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "allRight" (formula "19") (inst "sk=ov_4"))
                                 (rule "allRight" (formula "19") (inst "sk=fv_4"))
                                 (rule "orRight" (formula "19"))
                                 (rule "orRight" (formula "19"))
                                 (rule "notRight" (formula "21"))
                                 (rule "notRight" (formula "21"))
                                 (rule "notRight" (formula "21"))
                                 (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                 (rule "allLeft" (formula "20") (inst "t=returnval"))
                                 (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "allLeft" (formula "20") (inst "t=arr(i_0)"))
                                 (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "allLeft" (formula "13") (inst "t=arr(i_0)"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "close" (formula "24") (ifseqformula "20"))
                              )
                           )
                           (branch "CUT: ov_2 = null FALSE"
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "notRight" (formula "20"))
                              (rule "allLeft" (formula "12") (inst "t=ov_2"))
                              (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "allLeft" (formula "12") (inst "t=fv_2"))
                              (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "allLeft" (formula "18") (inst "t=ov_2"))
                              (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "allLeft" (formula "18") (inst "t=fv_2"))
                              (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "25"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "selectOfStore" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                              (rule "true_left" (formula "2"))
                              (builtin "Use Dependency Contract" (formula "10") (term "2,0,0") (ifInst ""  (formula "25") (term "2")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (builtin "Use Dependency Contract" (formula "17") (term "2,0,0,0") (ifInst ""  (formula "22") (term "2")) (ifInst ""  (formula "15")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (builtin "Use Dependency Contract" (formula "20") (term "2,0,0,0,0,0") (ifInst ""  (formula "25") (term "2")) (ifInst ""  (formula "15")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "21") (term "2")) (contract "de.uni.trier.infsec.environment.Environment[de.uni.trier.infsec.environment.Environment::$envLocs()].JML accessible clause.0"))
                              (rule "wellFormedStorePrimitiveArray" (formula "21") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "wellFormedAnonEQ" (formula "21") (term "0,0") (ifseqformula "15"))
                              (rule "wellFormedAnon" (formula "21") (term "0,0,0"))
                              (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "8")) (ifInst ""  (formula "14")))
                              (rule "disjointToElementOf" (formula "21") (term "0") (inst "ov=ov") (inst "fv=fv"))
                              (rule "elementOfSingleton" (formula "21") (term "0,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                              (rule "cut_direct" (formula "21") (term "1"))
                              (branch "CUT: de.uni.trier.infsec.environment.Environment::$envLocs(store(heapAfter_untrustedInput, returnval, arr(i_0), result_1)) = de.uni.trier.infsec.environment.Environment::$envLocs(heapAfter_untrustedInput) TRUE"
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "2") (term "2") (ifseqformula "21"))
                                 (rule "close" (formula "22") (ifseqformula "2"))
                              )
                              (branch "CUT: de.uni.trier.infsec.environment.Environment::$envLocs(store(heapAfter_untrustedInput, returnval, arr(i_0), result_1)) = de.uni.trier.infsec.environment.Environment::$envLocs(heapAfter_untrustedInput) FALSE"
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "allRight" (formula "21") (inst "sk=ov_3"))
                                 (rule "allRight" (formula "21") (inst "sk=fv_3"))
                                 (rule "orRight" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "notRight" (formula "23"))
                                 (rule "notRight" (formula "22"))
                                 (rule "notRight" (formula "23"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "allLeft" (formula "22") (inst "t=returnval"))
                                 (rule "replace_known_left" (formula "22") (term "0,1,0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "allLeft" (formula "22") (inst "t=arr(i_0)"))
                                 (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "allLeft" (formula "13") (inst "t=arr(i_0)"))
                                 (rule "notLeft" (formula "13"))
                                 (rule "close" (formula "26") (ifseqformula "22"))
                              )
                           )
                        )
                     )
                     (branch
                        (rule "allRight" (formula "18") (inst "sk=f_1"))
                        (rule "allRight" (formula "18") (inst "sk=o_1"))
                        (rule "orRight" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                        (rule "orRight" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "cut_direct" (formula "21") (term "0,0"))
                        (branch "CUT: o_1 = null TRUE"
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "false_right" (formula "22"))
                           (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "23") (term "1,1") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "22"))
                           (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "1"))
                           (rule "allLeft" (formula "11") (inst "t=f_1"))
                           (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "22")))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch "CUT: o_1 = null FALSE"
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "allLeft" (formula "12") (inst "t=o_1"))
                           (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "allLeft" (formula "12") (inst "t=f_1"))
                           (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "23")))
                           (rule "closeFalse" (formula "12"))
                        )
                     )
                  )
                  (branch "Null Reference (x_arr = null)"
                     (builtin "One Step Simplification" (formula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (x_arr != null, but x_7 Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "false_right" (formula "19"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Exceptional Post (untrustedInput)"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "andLeft" (formula "12"))
                  (rule "selectCreatedOfAnonEQ" (formula "13") (term "0,1,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "13"))
                  (rule "notLeft" (formula "13"))
                  (rule "close" (formula "16") (ifseqformula "15"))
               )
               (branch "Pre (untrustedInput)"
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "wellFormedAnon" (formula "12"))
                  (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "3")))
                  (rule "closeTrue" (formula "12"))
               )
            )
            (branch "Null Reference (_returnval = null)"
               (builtin "One Step Simplification" (formula "12"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_4 false"
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_returnval = null)"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_returnval = null)"
      (builtin "One Step Simplification" (formula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
   (rule "blockEmpty" (formula "10") (term "1,0,1"))
   (rule "commuteUnion" (formula "8") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "disjointToElementOf" (formula "7") (inst "ov=ov") (inst "fv=fv"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "subsetToElementOf" (formula "8") (inst "ov=ov") (inst "fv=fv"))
   (rule "elementOfUnion" (formula "8") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "nnf_imp2or" (formula "8") (term "0,0"))
   (rule "swapQuantifiersAll" (formula "7"))
   (rule "commute_or" (formula "8") (term "1,0,0"))
   (rule "commute_or" (formula "7") (term "0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "castDel" (formula "7") (term "0,0,0,0"))
   (rule "instanceof_static_type" (formula "7") (term "0,0,1,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "cnf_rightDist" (formula "8") (term "1,0,0"))
   (rule "commute_or" (formula "8") (term "1,1,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0"))
   (rule "distr_forallAnd" (formula "8") (term "0"))
   (rule "distr_forallAnd" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "commute_or_2" (formula "9") (term "0,0"))
   (rule "shift_paren_or" (formula "8") (term "0,0"))
   (rule "swapQuantifiersAll" (formula "8"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "castDel" (formula "8") (term "0,0,0,0,0"))
   (rule "castDel" (formula "8") (term "0,1,0,0"))
   (rule "instanceof_not_compatible" (formula "8") (term "0,1,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "commute_or" (formula "8") (term "0"))
   (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
   (rule "assignment" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
   (rule "assignment_read_length" (formula "11"))
   (branch "Normal Execution (_returnval != null)"
      (builtin "One Step Simplification" (formula "11"))
      (rule "less_than_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "impRight" (formula "11"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "10"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,0"))
      (rule "times_zero_1" (formula "7") (term "0"))
      (rule "leq_literals" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "methodCallReturn" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "tryEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
      (rule "eqSymm" (formula "11") (term "1,0,0,1"))
      (rule "selectOfAnon" (formula "11") (term "0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0,0,0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "nnf_notOr" (formula "11") (term "0,1,0,0,1"))
      (rule "nnf_notAnd" (formula "11") (term "1,0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "nnf_notOr" (formula "11") (term "0,0,0,1,0,0,1"))
      (rule "andRight" (formula "11"))
      (branch
         (rule "andRight" (formula "11"))
         (branch
            (rule "allRight" (formula "11") (inst "sk=fv_1"))
            (rule "allRight" (formula "11") (inst "sk=ov_1"))
            (rule "orRight" (formula "11"))
            (rule "notRight" (formula "11"))
            (rule "notRight" (formula "12"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
            (rule "allLeft" (formula "9") (inst "t=fv_1"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "1"))
         )
         (branch
            (rule "allRight" (formula "11") (inst "sk=ov_0"))
            (rule "allRight" (formula "11") (inst "sk=fv_0"))
            (rule "orRight" (formula "11"))
            (rule "notRight" (formula "11"))
            (rule "orRight" (formula "12"))
            (rule "allLeft" (formula "10") (inst "t=ov_0"))
            (rule "cut_direct" (formula "10") (term "0,1,0"))
            (branch "CUT: ov_0.<created> = TRUE TRUE"
               (builtin "One Step Simplification" (formula "11"))
               (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "10"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "false_right" (formula "14"))
               (rule "allLeft" (formula "11") (inst "t=fv_0"))
               (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")))
               (rule "closeFalse" (formula "11"))
            )
            (branch "CUT: ov_0.<created> = TRUE FALSE"
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "notRight" (formula "13"))
               (rule "applyEqRigid" (formula "12") (term "1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
               (rule "allLeft" (formula "10") (inst "t=fv_0"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
               (rule "closeFalse" (formula "10"))
            )
         )
      )
      (branch
         (rule "allRight" (formula "11") (inst "sk=f_0"))
         (rule "allRight" (formula "11") (inst "sk=o_0"))
         (rule "orRight" (formula "11"))
         (rule "orRight" (formula "11"))
         (rule "orRight" (formula "13"))
         (rule "orRight" (formula "11"))
         (rule "replace_known_right" (formula "14") (term "0,1,0,0") (ifseqformula "12"))
         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
         (rule "orRight" (formula "14"))
         (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
         (rule "closeTrue" (formula "13"))
      )
   )
   (branch "Null Reference (_returnval = null)"
      (builtin "One Step Simplification" (formula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
